# Generated by Django 5.1.6 on 2025-02-20 06:49

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import user.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('utils', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, error_messages={'max_length': 'Phone number must be exactly 10 characters.', 'min_length': 'Phone number must be exactly 10 characters.', 'unique': 'A user with that phone number already exists.'}, max_length=10, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(10)])),
                ('image', models.ImageField(blank=True, null=True, upload_to='media/user_pictures')),
                ('gender', models.ForeignKey(limit_choices_to={'choice_type': 'gender'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='users_gender', to='utils.choice')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('status', models.ForeignKey(limit_choices_to={'choice_type': 'status'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='users_status', to='utils.choice')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_type', models.ForeignKey(limit_choices_to={'choice_type': 'user'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='users', to='utils.choice')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', user.managers.CustomUserManager()),
            ],
        ),
    ]
